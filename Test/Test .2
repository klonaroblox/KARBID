local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

------------------------------------------------------------------------------------------------------------------------------------------------ 🆔| Variables
local HTTPService = game:GetService("HttpService")
local MarketplaceService = game:GetService("MarketplaceService")
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")
local VirtualInput = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local GameName = MarketplaceService:GetProductInfo(game.PlaceId, Enum.InfoType.Asset).Name

local Workspace = game.Workspace
local Players = game:GetService("Players")
local Plr = Players.LocalPlayer
local Backpack = Plr:WaitForChild("Backpack")
local PlrGui = Plr:WaitForChild("PlayerGui")
local Character = Plr.Character or Plr.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local PlaceId = game.PlaceId
local JobId = game.JobId

------------------------------------------------------------------------------------------------------------------------------------------------ 🚩| Window
local Window = Rayfield:CreateWindow({
	Name = "KARB.ID - SCRIPT HUB",
	Icon = "gamepad", -- 0 For Default / Roblox Image (Number)
	LoadingTitle = "Rayfield Interface Suite",
	LoadingSubtitle = "by Sirius",
	ShowText = "👁️", -- Unhide GUI
	Theme = "Amethyst", --
	ToggleUIKeybind = "K",

	DisableRayfieldPrompts = true,
	DisableBuildWarnings = true,

	ConfigurationSaving = {
		Enabled = true,
		FolderName = "KARB.ID - Configs", -- Create a custom folder for your hub/game
		FileName = "Place ID_" .. tostring(PlaceId),
	},

	Discord = {
		Enabled = false,
		Invite = "Invite Link",
		RememberJoins = false,
	},

	KeySystem = false,
	KeySettings = {
		Title = "Untitled",
		Subtitle = "Key System",
		Note = "No method of obtaining the key is provided",
		FileName = "Key",
		SaveKey = true,
		GrabKeyFromSite = false,
		Key = { "Hello" },
	},
})

------------------------------------------------------------------------------------------------------------------------------------------------ 🚩| Tabs
local GameTab = Window:CreateTab("Games", "gamepad-2")
local GameLabel = GameTab:CreateLabel(GameName)
local Divider = GameTab:CreateDivider()

local CharacterTab = Window:CreateTab("Character", "user")
local CharacterLabel = CharacterTab:CreateLabel(GameName)
local Divider = CharacterTab:CreateDivider()

------------------------------------------------------------------------------------------------------------------------------------------------ 🚩| Character Tab
----------------------------------------------------------------------------------------------------------------------- 🟢 | Rejoin
local RejoinButton = CharacterTab:CreateButton({
	Name = "Rejoin",
	Callback = function()
		local successRejoin, err = pcall(function()
			TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Plr)
		end)
		if not successRejoin then
			TeleportService:Teleport(PlaceId)
		end
	end,
})

----------------------------------------------------------------------------------------------------------------------- 🟢 | Server Hop
local ServerHopButton = CharacterTab:CreateButton({
	Name = "Server Hop",
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/LeoKholYt/roblox/main/lk_serverhop.lua"))():Teleport(
			PlaceId
		)
	end,
})

----------------------------------------------------------------------------------------------------------------------- 🟢 | Anti AFK
----------------------------------------------------------------------------------------------------------------------- 🟢 | Anti-AFK (No Movement, Only Input)

-- 📁 Flags
local AntiAFK_NoMoveToggle = false
local AntiAFK_NoMoveThread = nil

-- 🧠 Fake Input Function (No Movement)
local function StartAntiAFK_NoMove()
	if AntiAFK_NoMoveThread then
		return
	end -- prevent duplicates

	AntiAFK_NoMoveThread = task.spawn(function()
		while AntiAFK_NoMoveToggle do
			task.wait(math.random(25, 40)) -- human idle interval

			local action = math.random(1, 3)
			if action == 1 then
				-- ⌨️ Press and release harmless key (like LeftControl or Tab)
				local keys = { Enum.KeyCode.LeftControl, Enum.KeyCode.Tab, Enum.KeyCode.Escape }
				local key = keys[math.random(1, #keys)]
				VirtualInput:SendKeyEvent(true, key, false, game)
				task.wait(0.2)
				VirtualInput:SendKeyEvent(false, key, false, game)
			elseif action == 2 then
				-- 🖱️ Wiggle mouse slightly (no click)
				VirtualInput:SendMouseMove(math.random(300, 400), math.random(200, 300))
			elseif action == 3 then
				-- 👆 Fake UI Click in non-intrusive coords
				local x, y = math.random(10, 50), math.random(10, 50)
				VirtualInput:SendMouseButtonEvent(x, y, 0, true, game, 0)
				task.wait(0.1)
				VirtualInput:SendMouseButtonEvent(x, y, 0, false, game, 0)
			end
		end
	end)
end

-- 🧼 Stop Anti-AFK Cleanly
local function StopAntiAFK_NoMove()
	AntiAFK_NoMoveToggle = false
	if AntiAFK_NoMoveThread then
		task.cancel(AntiAFK_NoMoveThread)
		AntiAFK_NoMoveThread = nil
	end
end

-- ✅ Rayfield Toggle UI
CharacterTab:CreateToggle({
	Name = "Anti-AFK (No Character Movement)",
	CurrentValue = false,
	Flag = "AntiAFK_NoMoveToggle",
	Callback = function(state)
		AntiAFK_NoMoveToggle = state
		if state then
			StartAntiAFK_NoMove()
		else
			StopAntiAFK_NoMove()
		end
	end,
})

------------------------------------------------------------------------------------------------------------------------------------------------ 🚩| Game Tab
----------------------------------------------------------------------------------------------------------------------- 🟢 | Timer

if _G.TimerConn then
	_G.TimerConn:Disconnect()
	_G.TimerConn = nil
end

local SummonTimerSignal = PlrGui.Main.Summon.Main.Packs.Holder.Top.Timer
local GoldShopTimerSignal = PlrGui.Main.GoldShop.Holder.Main.Bottom.RestockBarBG.Title

local SummonTimerLabel = GameTab:CreateLabel("Next Summon : ", "clock")
local GoldShopTimerLabel = GameTab:CreateLabel("Next Gold Shop : ", "hourglass")

local function Timer()
	local CleanSummonTimer = SummonTimerSignal.Text:match("%d%d:%d%d") or "00:00"
	local CleanGoldShopTimer = GoldShopTimerSignal.Text:match("%d%d:%d%d") or "00:00"
	SummonTimerLabel:Set("Restock Summon : " .. CleanSummonTimer)
	GoldShopTimerLabel:Set("Restock Gold Shop : " .. CleanGoldShopTimer)
end

_G.TimerConn = SummonTimerSignal:GetPropertyChangedSignal("Text"):Connect(Timer)

----------------------------------------------------------------------------------------------------------------------- 🟢 | Food / Gold Shop
local FoodList = PlrGui.Main.GoldShop.Holder.Main.ItemSelection.List

local function BuyStocks()
	for _, food in ipairs(FoodList:GetChildren()) do
		local id = food:GetAttribute("ItemID")
		local amount = food:GetAttribute("Amount")
		if id and amount and amount > 0 then
			ReplicatedStorage.Packages.Knit.Services.GoldShopService.RF.BuyItem:InvokeServer(id, amount)
			print("Buying : " .. id, amount)
		end
	end
end

_G.FoodToggle = false
_G.FoodConns = _G.FoodConns or {}

local function ClearConns()
	for _, c in ipairs(_G.FoodConns) do
		c:Disconnect()
	end
	_G.FoodConns = {}
end

local function WatchFoods()
	ClearConns()
	for _, food in ipairs(FoodList:GetChildren()) do
		local conn = food:GetAttributeChangedSignal("Amount"):Connect(BuyStocks)
		table.insert(_G.FoodConns, conn)
	end
	table.insert(
		_G.FoodConns,
		FoodList.ChildAdded:Connect(function(child)
			local conn = child:GetAttributeChangedSignal("Amount"):Connect(BuyStocks)
			table.insert(_G.FoodConns, conn)
		end)
	)
end

local FoodToggle = GameTab:CreateToggle({
	Name = "Food Toggle",
	CurrentValue = false,
	Flag = "FoodToggle",
	Callback = function(v)
		_G.FoodToggle = v
		if v then
			BuyStocks()
			WatchFoods()
		else
			ClearConns()
		end
	end,
})

local Divider = GameTab:CreateDivider()

----------------------------------------------------------------------------------------------------------------------- 🟢 | Sell Arifacts (All)
local WarnLabel = GameTab:CreateLabel("Pick ONE of these toggle below to sell artifacts", "triangle-alert")

local ManagerToggle
local SellArtifactsToggle

if _G.SellArtifactsConn then
	_G.SellArtifactsConn:Disconnect()
	_G.SellArtifactsConn = nil
end

local function SellArtifacts()
	ReplicatedStorage.Packages.Knit.Services.LootService.RF.SellArtifacts:InvokeServer()
end

SellArtifactsToggle = GameTab:CreateToggle({
	Name = "Sell Artifacts (All)",
	CurrentValue = false,
	Flag = "SellArtifactsToggle",
	Callback = function(Value)
		if _G.SellArtifactsConn then
			_G.SellArtifactsConn:Disconnect()
			_G.SellArtifactsConn = nil
		end

		if Value then
			ManagerToggle:Set(false)
			SellArtifacts()
			_G.SellArtifactsConn = Plr.Backpack.ChildAdded:Connect(SellArtifacts)
		end
	end,
})

----------------------------------------------------------------------------------------------------------------------- 🟢 | Manager Artifacts (Keep Biggest, Sell Others)
if _G.ManagerConn then
	_G.ManagerConn:Disconnect()
	_G.ManagerConn = nil
end

local LootService = ReplicatedStorage.Packages.Knit.Services.LootService
local GuiHotbar = PlrGui.Hotbar.Backpack.Hotbar
local GuiBackpack = PlrGui.Hotbar.Backpack.Backpack.Inventory.List

local function Heart(UID, Visible)
	for i = 1, 10 do
		for _, GuiGroup in ipairs({ GuiHotbar:GetChildren(), GuiBackpack:GetChildren() }) do
			for _, Item in ipairs(GuiGroup) do
				if Item:GetAttribute("UID") == UID then
					local Heart = Item:FindFirstChild("Heart", true)
					if Heart and Heart.Visible == Visible then
						return true
					end
				end
			end
		end
	end
	task.wait(0.1)
	return false
end

local function Manager()
	task.wait(0.1)
	local Items = {}

	for _, Item in ipairs(Backpack:GetChildren()) do
		local ID = Item:GetAttribute("ID")
		local Scale = Item:GetAttribute("Scale")
		local UID = Item:GetAttribute("UID")
		if ID and Scale and UID then
			Items[#Items + 1] = {
				ID = ID,
				Scale = Scale,
				UID = UID,
				Favorite = false,
			}
		end
	end

	local function Favorite(GuiFolder)
		for _, ItemGui in ipairs(GuiFolder:GetChildren()) do
			local UID = ItemGui:GetAttribute("UID")
			local Heart = ItemGui:FindFirstChild("Heart", true)
			if UID and Heart and Heart.Visible then
				for _, Data in ipairs(Items) do
					if Data.UID == UID then
						Data.Favorite = true
						break
					end
				end
			end
		end
	end

	Favorite(GuiHotbar)
	Favorite(GuiBackpack)

	local Biggest = {}
	for _, Item in ipairs(Items) do
		local Current = Biggest[Item.ID]
		if not Current or Item.Scale > Current.Scale then
			Biggest[Item.ID] = Item
		end
	end

	for _, Item in ipairs(Items) do
		local ShouldBeFavorite = Biggest[Item.ID].UID == Item.UID
		if Item.Favorite and not ShouldBeFavorite then
			LootService.RE.Lock:FireServer(Item.UID)
			task.spawn(function()
				Heart(Item.UID, false)
			end)
			Item.Favorite = false
		elseif not Item.Favorite and ShouldBeFavorite then
			LootService.RE.Lock:FireServer(Item.UID)
			task.spawn(function()
				Heart(Item.UID, true)
			end)
			Item.Favorite = true
		end
	end

	for _, Item in ipairs(Items) do
		if not Item.Favorite then
			task.wait(0.1)
			LootService.RF.SellArtifacts:InvokeServer()
		end
	end
end

ManagerToggle = GameTab:CreateToggle({
	Name = "Manager Artifacts (Keep Biggest, Sell Others)",
	CurrentValue = false,
	Flag = "ManagerToggle",
	Callback = function(Value)
		if _G.ManagerConn then
			_G.ManagerConn:Disconnect()
			_G.ManagerConn = nil
		end

		if Value then
			SellArtifactsToggle:Set(false)
			Manager()
			_G.ManagerConn = Plr.Backpack.ChildAdded:Connect(Manager)
		end
	end,
})

local Divider = GameTab:CreateDivider()

----------------------------------------------------------------------------------------------------------------------- 🔽 | Summon Pack - Dropdown
local PacksFolder = Plr.PlayerGui.Main.Summon.Main.Packs.Holder.PacksFrame.List
local PackList = {}
local PacksName = {}
_G.SelectedPacks = {}

for _, Pack in ipairs(PacksFolder:GetChildren()) do
	local PackTitle = Pack:FindFirstChild("Title", true)
	local PackID = Pack:GetAttribute("PackID")
	if PackTitle and PackID then
		table.insert(PackList, {
			Title = PackTitle.Text,
			PackID = PackID,
		})
	end
end

table.sort(PackList, function(a, b)
	return a.PackID > b.PackID
end)

for _, Name in ipairs(PackList) do
	table.insert(PacksName, Name.Title)
end

local PacksDropdown = GameTab:CreateDropdown({
	Name = "Packs Select",
	Options = PacksName,
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "PacksDropdown",
	Callback = function(Options)
		_G.SelectedPacks = Options
		for _, selected in ipairs(Options) do
			print("Selected:", selected)
		end
	end,
})

----------------------------------------------------------------------------------------------------------------------- 🟢 | Summon Pack - Toggle
if _G.BuyPacksConn then
	_G.BuyPacksConn:Disconnect()
	_G.BuyPacksConn = nil
end

local function GetStock(text)
	if text:find("NO STOCK") then
		return 0
	end
	return tonumber(text:match("x(%d+)%s+STOCK"))
end

local function BuyPacks()
	task.spawn(function()
		PlrGui.Main.Units.Visible = false
		task.wait()
		PlrGui.Main.Units.Visible = true
		task.wait(5)
		PlrGui.Main.Units.Visible = false
	end)

	for _, SelectedPack in ipairs(_G.SelectedPacks) do
		for _, Pack in ipairs(PackList) do
			if SelectedPack == Pack.Title then
				for _, Pack2 in ipairs(PacksFolder:GetChildren()) do
					local Pack2Title = Pack2:FindFirstChild("Title", true)
					local Pack2Quantity = Pack2:FindFirstChild("Quantity", true)
					if Pack2Title and Pack2Quantity and Pack2Title.Text == SelectedPack then
						local Stock = GetStock(Pack2Quantity.Text)
						task.spawn(function()
							while Stock and Stock > 0 do
								ReplicatedStorage.Packages.Knit.Services.PackService.RF.OpenPack:InvokeServer(
									Pack.PackID,
									false
								)
								task.wait()
								Stock = GetStock(Pack2Quantity.Text)
							end
						end)

						if not Stock then
							print(string.format("No stock left for %s", Pack2Title.Text))
						end
						break
					end
				end
			end
		end
	end
end

local BuyPacksToggle = GameTab:CreateToggle({
	Name = "Buy Packs",
	CurrentValue = false,
	Flag = "BuyPacksToggle",
	Callback = function(Value)
		if _G.BuyPacksConn then
			_G.BuyPacksConn:Disconnect()
			_G.BuyPacksConn = nil
		end

		if Value then
			local lastTriggered = false
			_G.BuyPacksConn = SummonTimerSignal:GetPropertyChangedSignal("Text"):Connect(function()
				local timeText = SummonTimerSignal.Text:match("%d%d:%d%d")
				if timeText == "04:58" and not lastTriggered then
					lastTriggered = true
					BuyPacks()
				elseif timeText ~= "04:58" then
					lastTriggered = false
				end
			end)
			BuyPacks()
		end
	end,
})

local Divider = GameTab:CreateDivider()

----------------------------------------------------------------------------------------------------------------------- 🔽 | Rarites Dropdown
local Rarities = {
	"Rare",
	"Epic",
	"Legendary",
	"Mythic",
}

local RaritiesDropdown = GameTab:CreateDropdown({
	Name = "Rarities Select",
	Options = Rarities,
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "RaritiesDropdown",
	Callback = function(Options)
		_G.SelectedRarity = {}
		for _, Selected in ipairs(Options) do
			for i, Rarity in ipairs(Rarities) do
				if Selected == Rarity then
					table.insert(_G.SelectedRarity, i)
					break
				end
			end
		end
	end,
})

----------------------------------------------------------------------------------------------------------------------- 🟢 | Sell Unit Toggle
local UnitLists = PlrGui.Main.Units.Main.UnitSelection.List

if _G.SellUnitConn then
	_G.SellUnitConn:Disconnect()
	_G.SellUnitConn = nil
end

local function SellUnit()
	local SellLists = {}

	for _, unit in ipairs(UnitLists:GetChildren()) do
		local Rarity = unit:GetAttribute("Rarity")
		local UID = unit:GetAttribute("UID")
		local Index = unit:GetAttribute("Index")
		local Locked = unit:GetAttribute("Locked")

		if table.find(_G.SelectedRarity, Rarity) then
			if Rarity == 4 and Locked then
				ReplicatedStorage.Packages.Knit.Services.UnitService.RE.Lock:FireServer(Index)
			end
			table.insert(SellLists, UID)
		end
	end

	if #SellLists > 0 then
		ReplicatedStorage.Packages.Knit.Services.UnitService.RF.AttemptSell:InvokeServer(SellLists)
		print("Sold", #SellLists, "units")
	end
end

local SellUnitToggle = GameTab:CreateToggle({
	Name = "Sell Units",
	CurrentValue = false,
	Flag = "SellUnitToggle",
	Callback = function(Value)
		if _G.SellUnitConn then
			_G.SellUnitConn:Disconnect()
			_G.SellUnitConn = nil
		end

		if Value then
			_G.SellUnitConn = UnitLists.ChildAdded:Connect(SellUnit)
			SellUnit()
		end
	end,
})

local Divider = GameTab:CreateDivider()

----------------------------------------------------------------------------------------------------------------------- ⚙️ | Load Config
Rayfield.LoadConfiguration()
